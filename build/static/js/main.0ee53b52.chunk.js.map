{"version":3,"sources":["components/ContactItem/ContactItem.module.css","components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css","redux/contacts/contactsSlice.js","redux/contacts/contacts-actions.js","redux/contacts/contacts-reducers.js","redux/store.js","components/ContactForm/ContactForm.js","components/ContactItem/ContactItem.js","redux/contacts/contacts-selectors.js","components/Loader/Loader.js","components/ContactsList/ContactsList.js","components/Filter/Filter.js","App.js","index.js"],"names":["module","exports","contacts_endpoint","contactsApi","createApi","tagTypes","reducerPath","baseQuery","fetchBaseQuery","baseUrl","endpoints","builder","getContacts","query","providesTags","result","map","type","id","addNewContact","mutation","contact","method","url","body","invalidatesTags","deleteContact","res","err","useGetContactsQuery","useAddNewContactMutation","useDeleteContactMutation","changeFilter","createAction","changeFilterReducer","createReducer","_","payload","filterReducer","combineReducers","filter","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","persistConfig","key","version","storage","whitelist","persistedFilterReducer","persistReducer","store","configureStore","reducer","devTools","process","setupListeners","dispatch","persistor","persistStore","ContactForm","nameId","uuid","numberId","useState","name","setName","number","setNumber","handleChange","useCallback","e","target","value","handleSubmit","preventDefault","className","s","form","onSubmit","htmlFor","onChange","pattern","title","required","btnForm","ContactItem","item","itemName","itemNumber","btnDel","onClick","hr","getFilter","state","LoaderSpinner","color","height","width","timeout","ContactsList","contacts","useSelector","toLowerCase","data","error","isLoading","includes","Filter","findNameId","useDispatch","App","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.0ee53b52.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactItem_item__3O-gY\",\"btnDel\":\"ContactItem_btnDel__5JNWI\",\"itemName\":\"ContactItem_itemName__xp27P\",\"itemNumber\":\"ContactItem_itemNumber__15-zS\",\"hr\":\"ContactItem_hr__19Ubs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__3Aoz8\",\"btnForm\":\"ContactForm_btnForm__2lVqu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts\":\"Filter_contacts__jfwD8\"};","//RTK Query -> API Reference -> createApi\r\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\r\n\r\nconst BASE_CONTACTS_URL = 'https://61a0fd716c3b400017e69b4d.mockapi.io/api/v1/'\r\nconst contacts_endpoint = 'contacts/'\r\n\r\n// const findContact = (contacts, name) => {\r\n//   const normName = name.toLowerCase()\r\n//   return contacts.find((contact) => contact.name.toLowerCase() === normName)\r\n// }\r\n\r\nexport const contactsApi = createApi({\r\n  tagTypes: ['Contacts'],\r\n  reducerPath: 'contactsApi',\r\n  baseQuery: fetchBaseQuery({\r\n    baseUrl: BASE_CONTACTS_URL,\r\n  }),\r\n  /////\r\n  endpoints: (builder) => ({\r\n    getContacts: builder.query({\r\n      query: () => contacts_endpoint,\r\n      providesTags: (result) => [\r\n        ...result.map(({ id }) => ({\r\n          type: 'Contacts',\r\n          id,\r\n        })),\r\n      ],\r\n    }),\r\n    //////////\r\n    addNewContact: builder.mutation({\r\n      query: (contact) => ({\r\n        method: 'POST',\r\n        url: contacts_endpoint,\r\n        body: contact,\r\n        // body: !findContact(api.getState(), contact.name) ? contact : null,\r\n      }),\r\n      invalidatesTags: ['Contacts'],\r\n    }),\r\n    ///////\r\n    deleteContact: builder.mutation({\r\n      query: (id) => ({\r\n        method: 'DELETE',\r\n        url: `${contacts_endpoint}/${id}`,\r\n      }),\r\n      invalidatesTags: (res, err, id) => [{ type: 'Contacts', id }],\r\n    }),\r\n  }),\r\n})\r\n\r\nexport const {\r\n  useGetContactsQuery,\r\n  useAddNewContactMutation,\r\n  useDeleteContactMutation,\r\n} = contactsApi\r\n","import { createAction } from '@reduxjs/toolkit'\r\n\r\nexport const changeFilter = createAction('CHANGE_FILTER')\r\n","import { combineReducers } from 'redux'\r\nimport { createReducer } from '@reduxjs/toolkit'\r\nimport { changeFilter } from './contacts-actions'\r\n\r\nconst changeFilterReducer = createReducer('', {\r\n  [changeFilter]: (_, { payload }) => payload,\r\n})\r\n\r\nconst filterReducer = combineReducers({\r\n  filter: changeFilterReducer,\r\n})\r\n\r\nexport default filterReducer\r\n\r\n// const findContact = (contacts, name) => {\r\n//   const normName = name.toLowerCase()\r\n//   return contacts.find((contact) => contact.name.toLowerCase() === normName)\r\n// }\r\n\r\n// const itemsReducer = createReducer([], {\r\n//   [addNewContact]: (state, { payload }) =>\r\n//     !findContact(state, payload.name)\r\n//       ? [...state, payload]\r\n//       : alert(`${payload} is already in contact`),\r\n// })\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'\r\nimport { setupListeners } from '@reduxjs/toolkit/query'\r\nimport { contactsApi } from './contacts/contactsSlice'\r\nimport storage from 'redux-persist/lib/storage'\r\nimport filterReducer from './contacts/contacts-reducers'\r\nimport logger from 'redux-logger'\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist'\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n  contactsApi.middleware,\r\n]\r\n\r\nconst persistConfig = {\r\n  key: 'filter',\r\n  version: 1,\r\n  storage,\r\n  whitelist: ['filter'],\r\n}\r\n\r\nconst persistedFilterReducer = persistReducer(persistConfig, filterReducer)\r\n\r\n//RTK Query -> API Reference -> Generated API Slices -> API Slices: Redux Integration\r\nexport const store = configureStore({\r\n  reducer: {\r\n    [contactsApi.reducerPath]: contactsApi.reducer,\r\n    filter: persistedFilterReducer,\r\n    // filter: filterReducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV !== 'production',\r\n})\r\n\r\nsetupListeners(store.dispatch)\r\n\r\nexport const persistor = persistStore(store)\r\n","import { useState, useCallback } from 'react'\r\nimport { useAddNewContactMutation } from '../../redux/contacts/contactsSlice'\r\nimport { v4 as uuid } from 'uuid'\r\nimport s from './ContactForm.module.css'\r\n\r\nexport default function ContactForm() {\r\n  let nameId = uuid()\r\n  let numberId = uuid()\r\n\r\n  const [name, setName] = useState('')\r\n  const [number, setNumber] = useState('')\r\n\r\n  const [addNewContact] = useAddNewContactMutation()\r\n\r\n  const handleChange = useCallback(\r\n    (e) => {\r\n      const { name, value } = e.target\r\n      name === 'name' ? setName(value) : setNumber(value)\r\n    },\r\n    [name, number],\r\n  )\r\n\r\n  const handleSubmit = useCallback(\r\n    (e) => {\r\n      e.preventDefault()\r\n      addNewContact({ name, number })\r\n      setName('')\r\n      setNumber('')\r\n    },\r\n    [name, number],\r\n  )\r\n\r\n  return (\r\n    <form className={s.form} onSubmit={handleSubmit}>\r\n      <label htmlFor={nameId}>Name</label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"name\"\r\n        id={nameId}\r\n        value={name}\r\n        onChange={handleChange}\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n      />\r\n\r\n      <label htmlFor={numberId}>Number</label>\r\n      <input\r\n        type=\"tel\"\r\n        name=\"number\"\r\n        id={numberId}\r\n        value={number}\r\n        onChange={handleChange}\r\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n        title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n        required\r\n      />\r\n\r\n      <button className={s.btnForm} type=\"submit\">\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  )\r\n}\r\n","import s from './ContactItem.module.css'\r\nimport { useDeleteContactMutation } from '../../redux/contacts/contactsSlice'\r\n\r\nexport default function ContactItem({ contact }) {\r\n  const { id, name, number } = contact\r\n  const [deleteContact] = useDeleteContactMutation()\r\n  const handleClick = (e) => deleteContact(e.target.id)\r\n\r\n  return (\r\n    <>\r\n      <li key={id} className={s.item}>\r\n        <p className={s.itemName}>{name}</p>\r\n        <p className={s.itemNumber}>{number}</p>\r\n        <button\r\n          className={s.btnDel}\r\n          type=\"button\"\r\n          name={name}\r\n          id={id}\r\n          onClick={handleClick}\r\n        >\r\n          X\r\n        </button>\r\n      </li>\r\n      <hr className={s.hr} />\r\n    </>\r\n  )\r\n}\r\n","export const getFilter = (state) => state.filter.filter\r\n","import Loader from 'react-loader-spinner'\r\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css'\r\n\r\nexport default function LoaderSpinner() {\r\n  return (\r\n    <Loader\r\n      className=\"Loader\"\r\n      type=\"Oval\"\r\n      color=\"#00BFFF\"\r\n      height={100}\r\n      width={100}\r\n      timeout={3000}\r\n    />\r\n  )\r\n}\r\n","import { useSelector } from 'react-redux'\r\nimport ContactItem from '../ContactItem/ContactItem'\r\nimport { getFilter } from '../../redux/contacts/contacts-selectors'\r\nimport { useGetContactsQuery } from '../../redux/contacts/contactsSlice'\r\nimport LoaderSpinner from '../Loader/Loader'\r\n\r\nexport default function ContactsList() {\r\n  const filter = useSelector(getFilter).toLowerCase()\r\n  const { data, error, isLoading } = useGetContactsQuery()\r\n\r\n  const getFilteredContacts = (contacts) =>\r\n    contacts.filter((contact) => contact.name.toLowerCase().includes(filter))\r\n\r\n  return (\r\n    <>\r\n      {error ? (\r\n        <>Oh no, there was an error</>\r\n      ) : isLoading ? (\r\n        <LoaderSpinner />\r\n      ) : data ? (\r\n        <ul>\r\n          {getFilteredContacts(data).map((contact) => (\r\n            <ContactItem contact={contact} />\r\n          ))}\r\n        </ul>\r\n      ) : null}\r\n    </>\r\n  )\r\n}\r\n","import { useDispatch } from 'react-redux'\r\nimport { changeFilter } from '../../redux/contacts/contacts-actions'\r\nimport { v4 as uuid } from 'uuid'\r\nimport s from './Filter.module.css'\r\n\r\nexport default function Filter() {\r\n  const findNameId = uuid()\r\n  const dispatch = useDispatch()\r\n  const handleFilter = (e) =>\r\n    dispatch(changeFilter(e.target.value.toLowerCase()))\r\n\r\n  return (\r\n    <div className={s.contacts}>\r\n      <label htmlFor={findNameId}>Find contact by name</label>\r\n      <input\r\n        type=\"text\"\r\n        name=\"findName\"\r\n        id={findNameId}\r\n        onChange={handleFilter}\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n      />\r\n    </div>\r\n  )\r\n}\r\n","import './App.css'\nimport * as React from 'react'\nimport { ApiProvider } from '@reduxjs/toolkit/query/react'\nimport { contactsApi } from './redux/contacts/contactsSlice'\nimport ContactForm from './components/ContactForm/ContactForm'\nimport ContactsList from './components/ContactsList/ContactsList'\nimport Filter from './components/Filter/Filter'\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <div className=\"App-Contacts\">\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactsList />\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { Provider } from 'react-redux'\nimport { ApiProvider } from '@reduxjs/toolkit/query/react'\nimport { contactsApi } from './redux/contacts/contactsSlice'\nimport { store, persistor } from './redux/store'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <PersistGate loading={null} persistor={persistor}>\n      <Provider store={store}>\n        {/* <ApiProvider api={contactsApi}> */}\n        <App />\n        {/* </ApiProvider> */}\n      </Provider>\n    </PersistGate>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}